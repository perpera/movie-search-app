{"version":3,"file":"static/js/790.92758e51.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","helpers/SmoothScroll.js","helpers/notification.js","service/movies-api.js"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const CastWrapper = styled.div`\n  padding: 50px 0;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  padding-bottom: 60px;\n  @media screen and (min-width: 768px) {\n    gap: 30px;\n  }\n`;\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  width: 100%;\n\n  @media screen and (min-width: 768px) {\n    width: calc((100% - 60px) / 3);\n  }\n  @media screen and (min-width: 1440px) {\n    width: calc((100% - 90px) / 4);\n  }\n`;\nexport const CastImgWrap = styled.img`\n  width: 200px;\n  height: 200px;\n  border-radius: 50%;\n  background: url(${props => props.$actor}) no-repeat 0px -25px / cover;\n  background-color: #1cb114;\n\n  @media screen and (min-width: 1440px) {\n    width: 300px;\n    height: 300px;\n  }\n`;\n\nexport const CastName = styled.p`\n  color: #fff;\n  font-size: 20px;\n  font-weight: 600;\n`;\nexport const CastCharacter = styled.p`\n  color: #fff;\n  font-style: italic;\n  text-align: center;\n`;\nexport const NoCastMsg = styled.div`\n  color: #fff;\n  font-size: 20px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from '../../components/Loader/Loader';\nimport { getCast } from '../../service/movies-api';\nimport actorImage from '../../images/def_avatar.png';\nimport { notification } from '../../helpers/notification';\nimport { Container } from '../../components/App/App.styled';\nimport {\n  CastWrapper,\n  CastList,\n  CastItem,\n  CastImgWrap,\n  CastName,\n  CastCharacter,\n  NoCastMsg,\n} from './Cast.styled';\nimport { smoothScroll } from '../../helpers/SmoothScroll';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    setLoader(true);\n\n    const fetchCast = async () => {\n      try {\n        const castData = await getCast(movieId);\n        setCast(castData.cast);\n        return castData;\n      } catch ({ message }) {\n        notification(message);\n      } finally {\n        setLoader(false);\n\n        smoothScroll('castList');\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  const showDefaultImage = (actorSrc, defaultImg) => {\n    const actorUrl = `https://image.tmdb.org/t/p/w500${actorSrc}`;\n    return actorSrc ? actorUrl : defaultImg;\n  };\n\n  return (\n    <CastWrapper name={'castList'}>\n      <Container>\n        {loader && <Loader />}\n        {cast.length > 0 ? (\n          <CastList>\n            {cast.map(({ id, name, character, profile_path }) => (\n              <CastItem key={id}>\n                <CastImgWrap\n                  $actor={showDefaultImage(profile_path, actorImage)}\n                ></CastImgWrap>\n                <CastName>{name}</CastName>\n                <CastCharacter>{character}</CastCharacter>\n              </CastItem>\n            ))}\n          </CastList>\n        ) : (\n          <NoCastMsg>No information regarding this movie's cast</NoCastMsg>\n        )}\n      </Container>\n    </CastWrapper>\n  );\n};\n\nexport default Cast;\n","import { scroller } from 'react-scroll';\n\nexport const smoothScroll = target => {\n  scroller.scrollTo(target, {\n    duration: 1000,\n    delay: 0,\n    smooth: true,\n    offset: -50,\n  });\n};\n","import { Notify } from 'notiflix';\n\nexport const notification = message => {\n  Notify.init({\n    backOverlay: true,\n    info: {\n      background: '#8BD538',\n    },\n  });\n  return Notify.info(message);\n};\n","import axios from 'axios';\n\nconst KEY = '4441e8220eedb15302cf9a6e811d294b';\naxios.defaults.baseURL = 'https://api.themoviedb.org';\naxios.defaults.params = { api_key: KEY };\n\nexport const getTrending = async () => {\n  const { data } = await axios.get('/3/trending/movie/week');\n  return data.results;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(`/3/movie/${id}`);\n  return data;\n};\n\nexport const getMoviesBySearch = async (query, page) => {\n  const { data } = await axios.get(\n    `/3/search/movie?query=${query}&page=${page}`\n  );\n  return data;\n};\n\nexport const getCast = async id => {\n  const { data } = await axios.get(`/3/movie/${id}/credits`);\n  return data;\n};\n\nexport const getReviews = async id => {\n  const { data } = await axios.get(`3/movie/${id}/reviews`);\n  return data;\n};\n"],"names":["CastWrapper","styled","_templateObject","_taggedTemplateLiteral","CastList","_templateObject2","CastItem","_templateObject3","CastImgWrap","_templateObject4","props","$actor","CastName","_templateObject5","CastCharacter","_templateObject6","NoCastMsg","_templateObject7","Cast","movieId","useParams","cast","setCast","useState","loader","setLoader","useEffect","async","castData","getCast","message","notification","smoothScroll","fetchCast","showDefaultImage","actorSrc","defaultImg","actorUrl","concat","_jsx","name","children","_jsxs","Container","Loader","length","map","_ref","id","character","profile_path","actorImage","target","scroller","duration","delay","smooth","offset","Notify","backOverlay","info","background","axios","api_key","getTrending","data","results","getMovieById","getMoviesBySearch","query","page","getReviews"],"sourceRoot":""}